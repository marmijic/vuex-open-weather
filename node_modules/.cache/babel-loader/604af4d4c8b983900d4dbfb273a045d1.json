{"remainingRequest":"/Users/mariomijic/AG04/vuex-open-weather/node_modules/babel-loader/lib/index.js!/Users/mariomijic/AG04/vuex-open-weather/node_modules/eslint-loader/index.js??ref--13-0!/Users/mariomijic/AG04/vuex-open-weather/src/store/module/open-weather-api.js","dependencies":[{"path":"/Users/mariomijic/AG04/vuex-open-weather/src/store/module/open-weather-api.js","mtime":1619212659918},{"path":"/Users/mariomijic/AG04/vuex-open-weather/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mariomijic/AG04/vuex-open-weather/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/mariomijic/AG04/vuex-open-weather/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9tYXJpb21pamljL0FHMDQvdnVleC1vcGVuLXdlYXRoZXIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5jb25jYXQuanMiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCBheGlvcyBmcm9tICJheGlvcyI7CnZhciB6YWdyZWJJZCA9IDMzMzc1MzI7CnZhciBvc2lqZWtJZCA9IDMxOTM5MzU7CnZhciByaWpla2FJZCA9IDMxOTE2NDg7CnZhciBzcGxpdElkID0gMzE5MDI2MTsKdmFyIGR1YnJvdm5pa0lkID0gMzIwMTA0NzsKdmFyIHphZGFySWQgPSAzMTg2OTUyOwp2YXIgdmFyYXpkaW5JZCA9IDMxODgzODM7CgpmdW5jdGlvbiBfZmV0Y2hXZWF0aGVyRm9yQ2l0eTIoKSB7CiAgcmV0dXJuIF9mZXRjaFdlYXRoZXJGb3JDaXR5LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIF9mZXRjaFdlYXRoZXJGb3JDaXR5KCkgewogIF9mZXRjaFdlYXRoZXJGb3JDaXR5ID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgIHZhciByZXNwb25zZTsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gMDsKICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAzOwogICAgICAgICAgICByZXR1cm4gYXhpb3MuZ2V0KCIiLmNvbmNhdChwcm9jZXNzLmVudi5WVUVfQVBQX1VSTCwgIi9ncm91cD9pZD0iKS5jb25jYXQoemFncmViSWQsICIsIikuY29uY2F0KG9zaWpla0lkLCAiLCIpLmNvbmNhdChyaWpla2FJZCwgIiwiKS5jb25jYXQoc3BsaXRJZCwgIiwiKS5jb25jYXQoZHVicm92bmlrSWQsICIsIikuY29uY2F0KHphZGFySWQsICIsIikuY29uY2F0KHZhcmF6ZGluSWQsICImYXBwaWQ9IikuY29uY2F0KHByb2Nlc3MuZW52LlZVRV9BUFBfQVBJX0tFWSwgIiZ1bml0cz1tZXRyaWMiKSk7CgogICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgcmVzcG9uc2UuZGF0YSk7CgogICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDc7CiAgICAgICAgICAgIF9jb250ZXh0Mi50MCA9IF9jb250ZXh0MlsiY2F0Y2giXSgwKTsKICAgICAgICAgICAgY29uc29sZS5lcnJvcigiRmFpbGVkIHRvIGZldGNoIHdlYXRoZXIiLCBfY29udGV4dDIudDApOwoKICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUyLCBudWxsLCBbWzAsIDddXSk7CiAgfSkpOwogIHJldHVybiBfZmV0Y2hXZWF0aGVyRm9yQ2l0eS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9Cgp2YXIgc3RhdGUgPSB7CiAgd2VhdGhlcjoge30KfTsKdmFyIGdldHRlcnMgPSB7CiAgY2l0aWVzV2VhdGhlcjogZnVuY3Rpb24gY2l0aWVzV2VhdGhlcihzdGF0ZSkgewogICAgcmV0dXJuIHN0YXRlLndlYXRoZXIubGlzdDsKICB9Cn07CnZhciBhY3Rpb25zID0gewogIGZldGNoV2VhdGhlckZvckNpdHk6IGZ1bmN0aW9uIGZldGNoV2VhdGhlckZvckNpdHkoX3JlZikgewogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgdmFyIGNvbW1pdCwgcmVzcG9uc2U7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBjb21taXQgPSBfcmVmLmNvbW1pdDsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzsKICAgICAgICAgICAgICByZXR1cm4gX2ZldGNoV2VhdGhlckZvckNpdHkyKCk7CgogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgIGNvbW1pdCgiYWRkV2VhdGhlckZvckNpdHkiLCByZXNwb25zZSk7CgogICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUpOwogICAgfSkpKCk7CiAgfQp9Owp2YXIgbXV0YXRpb25zID0gewogIGFkZFdlYXRoZXJGb3JDaXR5OiBmdW5jdGlvbiBhZGRXZWF0aGVyRm9yQ2l0eShzdGF0ZSwgd2VhdGhlcikgewogICAgc3RhdGUud2VhdGhlciA9IHdlYXRoZXI7CiAgfQp9OwpleHBvcnQgZGVmYXVsdCB7CiAgc3RhdGU6IHN0YXRlLAogIG11dGF0aW9uczogbXV0YXRpb25zLAogIGFjdGlvbnM6IGFjdGlvbnMsCiAgZ2V0dGVyczogZ2V0dGVycwp9Ow=="},{"version":3,"sources":["/Users/mariomijic/AG04/vuex-open-weather/src/store/module/open-weather-api.js"],"names":["axios","zagrebId","osijekId","rijekaId","splitId","dubrovnikId","zadarId","varazdinId","fetchWeatherForCity","get","process","env","VUE_APP_URL","VUE_APP_API_KEY","response","data","console","error","state","weather","getters","citiesWeather","list","actions","commit","mutations","addWeatherForCity"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,QAAQ,GAAG,OAAjB;AACA,IAAMC,QAAQ,GAAG,OAAjB;AACA,IAAMC,QAAQ,GAAG,OAAjB;AACA,IAAMC,OAAO,GAAG,OAAhB;AACA,IAAMC,WAAW,GAAG,OAApB;AACA,IAAMC,OAAO,GAAG,OAAhB;AACA,IAAMC,UAAU,GAAG,OAAnB;;SAEeC,qB;;;;;iFAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAE2BR,KAAK,CAACS,GAAN,WAClBC,OAAO,CAACC,GAAR,CAAYC,WADM,uBACkBX,QADlB,cAC8BC,QAD9B,cAC0CC,QAD1C,cACsDC,OADtD,cACiEC,WADjE,cACgFC,OADhF,cAC2FC,UAD3F,oBAC+GG,OAAO,CAACC,GAAR,CAAYE,eAD3H,mBAF3B;;AAAA;AAEUC,YAAAA,QAFV;AAAA,8CAKWA,QAAQ,CAACC,IALpB;;AAAA;AAAA;AAAA;AAOIC,YAAAA,OAAO,CAACC,KAAR,CAAc,yBAAd;;AAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAWA,IAAMC,KAAK,GAAG;AACZC,EAAAA,OAAO,EAAE;AADG,CAAd;AAIA,IAAMC,OAAO,GAAG;AACdC,EAAAA,aAAa,EAAE,uBAACH,KAAD,EAAW;AACxB,WAAOA,KAAK,CAACC,OAAN,CAAcG,IAArB;AACD;AAHa,CAAhB;AAMA,IAAMC,OAAO,GAAG;AACRf,EAAAA,mBADQ,qCACwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAVgB,cAAAA,MAAU,QAAVA,MAAU;AAAA;AAAA,qBACbhB,qBAAmB,EADN;;AAAA;AAC9BM,cAAAA,QAD8B;AAEpCU,cAAAA,MAAM,CAAC,mBAAD,EAAsBV,QAAtB,CAAN;;AAFoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGrC;AAJa,CAAhB;AAOA,IAAMW,SAAS,GAAG;AAChBC,EAAAA,iBAAiB,EAAE,2BAACR,KAAD,EAAQC,OAAR,EAAoB;AACrCD,IAAAA,KAAK,CAACC,OAAN,GAAgBA,OAAhB;AACD;AAHe,CAAlB;AAMA,eAAe;AACbD,EAAAA,KAAK,EAALA,KADa;AAEbO,EAAAA,SAAS,EAATA,SAFa;AAGbF,EAAAA,OAAO,EAAPA,OAHa;AAIbH,EAAAA,OAAO,EAAPA;AAJa,CAAf","sourcesContent":["import axios from \"axios\";\n\nconst zagrebId = 3337532;\nconst osijekId = 3193935;\nconst rijekaId = 3191648;\nconst splitId = 3190261;\nconst dubrovnikId = 3201047;\nconst zadarId = 3186952;\nconst varazdinId = 3188383;\n\nasync function fetchWeatherForCity() {\n  try {\n    const response = await axios.get(\n      `${process.env.VUE_APP_URL}/group?id=${zagrebId},${osijekId},${rijekaId},${splitId},${dubrovnikId},${zadarId},${varazdinId}&appid=${process.env.VUE_APP_API_KEY}&units=metric`\n    );\n    return response.data;\n  } catch (e) {\n    console.error(\"Failed to fetch weather\", e);\n  }\n}\n\nconst state = {\n  weather: {},\n};\n\nconst getters = {\n  citiesWeather: (state) => {\n    return state.weather.list;\n  },\n};\n\nconst actions = {\n  async fetchWeatherForCity({ commit }) {\n    const response = await fetchWeatherForCity();\n    commit(\"addWeatherForCity\", response);\n  },\n};\n\nconst mutations = {\n  addWeatherForCity: (state, weather) => {\n    state.weather = weather;\n  },\n};\n\nexport default {\n  state,\n  mutations,\n  actions,\n  getters,\n};\n"]}]}